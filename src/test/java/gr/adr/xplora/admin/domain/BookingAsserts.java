package gr.adr.xplora.admin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BookingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllPropertiesEquals(Booking expected, Booking actual) {
        assertBookingAutoGeneratedPropertiesEquals(expected, actual);
        assertBookingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllUpdatablePropertiesEquals(Booking expected, Booking actual) {
        assertBookingUpdatableFieldsEquals(expected, actual);
        assertBookingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAutoGeneratedPropertiesEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableFieldsEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking relevant properties")
            .satisfies(e -> assertThat(e.getBookDatetime()).as("check bookDatetime").isEqualTo(actual.getBookDatetime()))
            .satisfies(e -> assertThat(e.getNoPersons()).as("check noPersons").isEqualTo(actual.getNoPersons()))
            .satisfies(e -> assertThat(e.getNoKids()).as("check noKids").isEqualTo(actual.getNoKids()))
            .satisfies(e -> assertThat(e.getNoPets()).as("check noPets").isEqualTo(actual.getNoPets()))
            .satisfies(e -> assertThat(e.getTotal()).as("check total").isEqualTo(actual.getTotal()))
            .satisfies(e -> assertThat(e.getPaymentType()).as("check paymentType").isEqualTo(actual.getPaymentType()))
            .satisfies(e -> assertThat(e.getValid()).as("check valid").isEqualTo(actual.getValid()))
            .satisfies(e -> assertThat(e.getCancelledAt()).as("check cancelledAt").isEqualTo(actual.getCancelledAt()))
            .satisfies(e -> assertThat(e.getRemoteData()).as("check remoteData").isEqualTo(actual.getRemoteData()))
            .satisfies(e -> assertThat(e.getRemoteId()).as("check remoteId").isEqualTo(actual.getRemoteId()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableRelationshipsEquals(Booking expected, Booking actual) {
        assertThat(expected)
            .as("Verify Booking relationships")
            .satisfies(e -> assertThat(e.getSchedule()).as("check schedule").isEqualTo(actual.getSchedule()))
            .satisfies(e -> assertThat(e.getPassenger()).as("check passenger").isEqualTo(actual.getPassenger()));
    }
}
