package gr.adr.xplora.admin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentAllPropertiesEquals(Content expected, Content actual) {
        assertContentAutoGeneratedPropertiesEquals(expected, actual);
        assertContentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentAllUpdatablePropertiesEquals(Content expected, Content actual) {
        assertContentUpdatableFieldsEquals(expected, actual);
        assertContentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentAutoGeneratedPropertiesEquals(Content expected, Content actual) {
        assertThat(expected)
            .as("Verify Content auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentUpdatableFieldsEquals(Content expected, Content actual) {
        assertThat(expected)
            .as("Verify Content relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getShortDescription()).as("check shortDescription").isEqualTo(actual.getShortDescription()))
            .satisfies(e -> assertThat(e.getData()).as("check data").isEqualTo(actual.getData()))
            .satisfies(e -> assertThat(e.getMeta()).as("check meta").isEqualTo(actual.getMeta()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentUpdatableRelationshipsEquals(Content expected, Content actual) {
        assertThat(expected)
            .as("Verify Content relationships")
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getDestination()).as("check destination").isEqualTo(actual.getDestination()))
            .satisfies(e -> assertThat(e.getTourCategory()).as("check tourCategory").isEqualTo(actual.getTourCategory()))
            .satisfies(e -> assertThat(e.getPlace()).as("check place").isEqualTo(actual.getPlace()))
            .satisfies(e -> assertThat(e.getPlaceCategory()).as("check placeCategory").isEqualTo(actual.getPlaceCategory()))
            .satisfies(e -> assertThat(e.getTourExtraCategory()).as("check tourExtraCategory").isEqualTo(actual.getTourExtraCategory()))
            .satisfies(e -> assertThat(e.getTourExtra()).as("check tourExtra").isEqualTo(actual.getTourExtra()))
            .satisfies(e -> assertThat(e.getMenu()).as("check menu").isEqualTo(actual.getMenu()))
            .satisfies(e -> assertThat(e.getWebPage()).as("check webPage").isEqualTo(actual.getWebPage()))
            .satisfies(e -> assertThat(e.getTag()).as("check tag").isEqualTo(actual.getTag()))
            .satisfies(e -> assertThat(e.getTourStep()).as("check tourStep").isEqualTo(actual.getTourStep()))
            .satisfies(e -> assertThat(e.getPromotion()).as("check promotion").isEqualTo(actual.getPromotion()))
            .satisfies(e -> assertThat(e.getImageFile()).as("check imageFile").isEqualTo(actual.getImageFile()));
    }
}
