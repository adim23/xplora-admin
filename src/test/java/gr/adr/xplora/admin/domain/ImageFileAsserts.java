package gr.adr.xplora.admin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ImageFileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImageFileAllPropertiesEquals(ImageFile expected, ImageFile actual) {
        assertImageFileAutoGeneratedPropertiesEquals(expected, actual);
        assertImageFileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImageFileAllUpdatablePropertiesEquals(ImageFile expected, ImageFile actual) {
        assertImageFileUpdatableFieldsEquals(expected, actual);
        assertImageFileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImageFileAutoGeneratedPropertiesEquals(ImageFile expected, ImageFile actual) {
        assertThat(expected)
            .as("Verify ImageFile auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImageFileUpdatableFieldsEquals(ImageFile expected, ImageFile actual) {
        assertThat(expected)
            .as("Verify ImageFile relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getAlt()).as("check alt").isEqualTo(actual.getAlt()))
            .satisfies(e -> assertThat(e.getFilename()).as("check filename").isEqualTo(actual.getFilename()))
            .satisfies(e -> assertThat(e.getData()).as("check data").isEqualTo(actual.getData()))
            .satisfies(e -> assertThat(e.getDataContentType()).as("check data contenty type").isEqualTo(actual.getDataContentType()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImageFileUpdatableRelationshipsEquals(ImageFile expected, ImageFile actual) {
        assertThat(expected)
            .as("Verify ImageFile relationships")
            .satisfies(e -> assertThat(e.getDestination()).as("check destination").isEqualTo(actual.getDestination()))
            .satisfies(e -> assertThat(e.getTour()).as("check tour").isEqualTo(actual.getTour()))
            .satisfies(e -> assertThat(e.getTourCategory()).as("check tourCategory").isEqualTo(actual.getTourCategory()))
            .satisfies(e -> assertThat(e.getPlace()).as("check place").isEqualTo(actual.getPlace()))
            .satisfies(e -> assertThat(e.getPlaceCategory()).as("check placeCategory").isEqualTo(actual.getPlaceCategory()))
            .satisfies(e -> assertThat(e.getVehicle()).as("check vehicle").isEqualTo(actual.getVehicle()))
            .satisfies(e -> assertThat(e.getDriver()).as("check driver").isEqualTo(actual.getDriver()));
    }
}
