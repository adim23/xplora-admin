package gr.adr.xplora.admin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MenuAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuAllPropertiesEquals(Menu expected, Menu actual) {
        assertMenuAutoGeneratedPropertiesEquals(expected, actual);
        assertMenuAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuAllUpdatablePropertiesEquals(Menu expected, Menu actual) {
        assertMenuUpdatableFieldsEquals(expected, actual);
        assertMenuUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuAutoGeneratedPropertiesEquals(Menu expected, Menu actual) {
        assertThat(expected)
            .as("Verify Menu auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuUpdatableFieldsEquals(Menu expected, Menu actual) {
        assertThat(expected)
            .as("Verify Menu relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()))
            .satisfies(e -> assertThat(e.getIcon()).as("check icon").isEqualTo(actual.getIcon()))
            .satisfies(e -> assertThat(e.getUri()).as("check uri").isEqualTo(actual.getUri()))
            .satisfies(e -> assertThat(e.getDefaultImage()).as("check defaultImage").isEqualTo(actual.getDefaultImage()))
            .satisfies(e -> assertThat(e.getDefaultImageData()).as("check defaultImageData").isEqualTo(actual.getDefaultImageData()))
            .satisfies(
                e ->
                    assertThat(e.getDefaultImageDataContentType())
                        .as("check defaultImageData contenty type")
                        .isEqualTo(actual.getDefaultImageDataContentType())
            )
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuUpdatableRelationshipsEquals(Menu expected, Menu actual) {
        assertThat(expected)
            .as("Verify Menu relationships")
            .satisfies(e -> assertThat(e.getPage()).as("check page").isEqualTo(actual.getPage()))
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()))
            .satisfies(e -> assertThat(e.getTourCategory()).as("check tourCategory").isEqualTo(actual.getTourCategory()))
            .satisfies(e -> assertThat(e.getDestination()).as("check destination").isEqualTo(actual.getDestination()));
    }
}
