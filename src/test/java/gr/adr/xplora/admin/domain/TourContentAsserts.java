package gr.adr.xplora.admin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TourContentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourContentAllPropertiesEquals(TourContent expected, TourContent actual) {
        assertTourContentAutoGeneratedPropertiesEquals(expected, actual);
        assertTourContentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourContentAllUpdatablePropertiesEquals(TourContent expected, TourContent actual) {
        assertTourContentUpdatableFieldsEquals(expected, actual);
        assertTourContentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourContentAutoGeneratedPropertiesEquals(TourContent expected, TourContent actual) {
        assertThat(expected)
            .as("Verify TourContent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourContentUpdatableFieldsEquals(TourContent expected, TourContent actual) {
        assertThat(expected)
            .as("Verify TourContent relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getShortDescription()).as("check shortDescription").isEqualTo(actual.getShortDescription()))
            .satisfies(e -> assertThat(e.getData()).as("check data").isEqualTo(actual.getData()))
            .satisfies(e -> assertThat(e.getMeta()).as("check meta").isEqualTo(actual.getMeta()))
            .satisfies(e -> assertThat(e.getCancellation()).as("check cancellation").isEqualTo(actual.getCancellation()))
            .satisfies(e -> assertThat(e.getActivityPath()).as("check activityPath").isEqualTo(actual.getActivityPath()))
            .satisfies(e -> assertThat(e.getAtAGlance()).as("check atAGlance").isEqualTo(actual.getAtAGlance()))
            .satisfies(e -> assertThat(e.getInDetail()).as("check inDetail").isEqualTo(actual.getInDetail()))
            .satisfies(e -> assertThat(e.getWhatIsIncluded()).as("check whatIsIncluded").isEqualTo(actual.getWhatIsIncluded()))
            .satisfies(e -> assertThat(e.getYouCanAdd()).as("check youCanAdd").isEqualTo(actual.getYouCanAdd()))
            .satisfies(
                e -> assertThat(e.getImportantInformation()).as("check importantInformation").isEqualTo(actual.getImportantInformation())
            )
            .satisfies(e -> assertThat(e.getExtraInfo()).as("check extraInfo").isEqualTo(actual.getExtraInfo()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourContentUpdatableRelationshipsEquals(TourContent expected, TourContent actual) {
        assertThat(expected)
            .as("Verify TourContent relationships")
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()));
    }
}
