package gr.adr.xplora.admin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TourExtraCategoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourExtraCategoryAllPropertiesEquals(TourExtraCategory expected, TourExtraCategory actual) {
        assertTourExtraCategoryAutoGeneratedPropertiesEquals(expected, actual);
        assertTourExtraCategoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourExtraCategoryAllUpdatablePropertiesEquals(TourExtraCategory expected, TourExtraCategory actual) {
        assertTourExtraCategoryUpdatableFieldsEquals(expected, actual);
        assertTourExtraCategoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourExtraCategoryAutoGeneratedPropertiesEquals(TourExtraCategory expected, TourExtraCategory actual) {
        assertThat(expected)
            .as("Verify TourExtraCategory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourExtraCategoryUpdatableFieldsEquals(TourExtraCategory expected, TourExtraCategory actual) {
        assertThat(expected)
            .as("Verify TourExtraCategory relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()))
            .satisfies(e -> assertThat(e.getIcon()).as("check icon").isEqualTo(actual.getIcon()))
            .satisfies(e -> assertThat(e.getDefaultImage()).as("check defaultImage").isEqualTo(actual.getDefaultImage()))
            .satisfies(e -> assertThat(e.getDefaultImageData()).as("check defaultImageData").isEqualTo(actual.getDefaultImageData()))
            .satisfies(
                e ->
                    assertThat(e.getDefaultImageDataContentType())
                        .as("check defaultImageData contenty type")
                        .isEqualTo(actual.getDefaultImageDataContentType())
            )
            .satisfies(e -> assertThat(e.getShopCategoryId()).as("check shopCategoryId").isEqualTo(actual.getShopCategoryId()))
            .satisfies(e -> assertThat(e.getShopUrl()).as("check shopUrl").isEqualTo(actual.getShopUrl()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTourExtraCategoryUpdatableRelationshipsEquals(TourExtraCategory expected, TourExtraCategory actual) {
        assertThat(expected)
            .as("Verify TourExtraCategory relationships")
            .satisfies(e -> assertThat(e.getExtras()).as("check extras").isEqualTo(actual.getExtras()));
    }
}
